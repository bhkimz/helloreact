{"version":3,"sources":["component/ui/menu/MenuComp.js","reducers/Board_Reducer.js","component/ui/board/BoardItem.js","component/ui/board/BoardForm.js","component/ui/board/Boardlist.js","App.js","serviceWorker.js","reducers/index.js","index.js"],"names":["MenuComp","react_default","a","createElement","className","onClick","this","props","Component","BOARD_SAVE","BOARD_REMOVE","BOARD_READ","board_save","data","type","board_read","brdno","initialState","maxNo","boards","brdwriter","brdtitle","brddate","Date","selectedBoard","BoardItem","handleUpdateForm","_this","dispatch","_this2","row","toLocaleDateString","connect","BoardForm","state","initialSelectedBoard","rddate","handleChange","e","setState","Object","defineProperty","target","name","value","handleSave","nextProps","placeholder","onChange","Boardlist","board_BoardForm","border","align","width","map","board_BoardItem","key","Board_Reducer","ui_menu_MenuComp","board_Boardlist","Boolean","window","location","hostname","match","reducers","combineReducers","arguments","length","undefined","action","objectSpread","concat","filter","find","store","createStore","console","log","getState","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7c72e343.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport './MenuComp.css';\r\n\r\nclass MenuComp extends Component{ \r\n    render(){\r\n        const style = {\r\n          backgroundColor : 'red',\r\n          border: '1px solid black', \r\n          left: 0, \r\n        }\r\n\r\n        return( \r\n            <div className=\"Menu\">\r\n            {/* // <div style={style}> */}\r\n            <ul>\r\n                <li  onClick={this.props.onClick} className=\"MenuItem\">\r\n                     메뉴 1\r\n                </li>\r\n                <li onClick={this.props.onClick} className=\"MenuItem\">\r\n                     메뉴 2\r\n                </li>\r\n                <li onClick={this.props.onClick} className=\"MenuItem\">\r\n                     메뉴 3\r\n                </li>\r\n            </ul>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MenuComp;","const BOARD_SAVE = 'SAVE';\r\nconst BOARD_REMOVE = 'REMOVE';\r\nconst BOARD_READ = 'ONE';\r\nconst BOARD_LIST = 'LIST';\r\nexport const board_save = (data) => (\r\n    {\r\n        type: BOARD_SAVE,\r\n        data\r\n    });\r\nexport const board_remove = (brdno) => (\r\n    {\r\n        type: BOARD_REMOVE,\r\n        brdno: brdno\r\n    });\r\nexport const board_read = (brdno) => (\r\n    {\r\n        type: BOARD_READ,\r\n        brdno: brdno\r\n    });\r\nexport const board_list = () => (\r\n    { type: BOARD_LIST }\r\n);\r\n\r\nconst initialState = {\r\n    maxNo: 3,\r\n    boards: [\r\n        {\r\n            brdno: 1,\r\n            brdwriter: 'Lee SunSin',\r\n            brdtitle: 'If you intend to live then you die',\r\n            brddate: new Date()\r\n        },\r\n        {\r\n            brdno: 2,\r\n            brdwriter: 'So SiNo',\r\n            brdtitle: 'Founder for two countries',\r\n            brddate: new Date()\r\n        }\r\n    ],\r\n    selectedBoard: {}\r\n};\r\n\r\nexport default function board_reducer(state = initialState, action) {\r\n    let boards = state.boards;\r\n    switch (action.type) {\r\n        case BOARD_SAVE:\r\n            let data = action.data;\r\n            let maxNo = state.maxNo;\r\n            if (!data.brdno) { // new : Insert \r\n                return {\r\n                    maxNo: maxNo + 1,\r\n                    boards: boards.concat({ ...data, brdno: maxNo, brddate: new Date() }),\r\n                    selectedBoard: {}\r\n                };\r\n            }\r\n\r\n            return {\r\n                ...state,\r\n                boards: boards.map(row => data.brdno === row.brdno ? { ...data } : row),\r\n                selectedBoard: {}\r\n            };\r\n        case BOARD_REMOVE:\r\n            return {\r\n                ...state,\r\n                boards: boards.filter(row => row.brdno !== action.brdno),\r\n                selectedBoard: {}\r\n            };\r\n        case BOARD_READ:\r\n            return {\r\n                ...state,\r\n                selectedBoard: boards.find(row => row.brdno === action.brdno)\r\n            };\r\n        default: return state;\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { board_read, board_remove } from './../../../reducers/Board_Reducer';\r\n\r\nclass BoardItem extends Component {\r\n    // handleRemove = () => {\r\n    //     const { row, onRemove } = this.props;\r\n    //     onRemove(row.brdno);\r\n    // }\r\n\r\n    // handleSelectRow = () => {\r\n    //     const { row, onSelectRow } = this.props;\r\n    //     onSelectRow(row);\r\n    // }\r\n\r\n    handleUpdateForm = (brdno) => {\r\n        this.props.dispatch(board_read(brdno));\r\n    }\r\n\r\n    render() {\r\n        const row = this.props.row;\r\n\r\n        return (\r\n            <tr>\r\n                <td>{row.brdno}</td>\r\n                <td><a onClick={ () => this.handleUpdateForm(row.brdno) }> {row.brdtitle} </a></td>\r\n                <td>{row.brdwriter}</td>\r\n                <td>{row.brddate.toLocaleDateString('ko-KR')}</td> \r\n                <td><a onClick={() => { this.props.dispatch(board_remove(row.brdno)) }}>X</a></td> \r\n            </tr>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect()(BoardItem) ","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { board_save } from './../../../reducers/Board_Reducer';\r\n\r\n\r\nclass BoardForm extends Component {\r\n    state = {};\r\n    initialSelectedBoard = {\r\n        brdno: \"\",\r\n        brdtitle: \"\",\r\n        brdwriter: \"\",\r\n        rddate: \"\"\r\n    };\r\n\r\n    handleChange = (e) => {\r\n        this.setState({ [e.target.name]: e.target.value });\r\n    }\r\n\r\n    handleSave = () => {\r\n        this.props.dispatch(board_save(this.state));\r\n        this.setState(this.initialSelectedBoard);\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        this.setState(nextProps.selectedBoard);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <input placeholder=\"title\" name=\"brdtitle\" value={this.state.brdtitle} onChange={this.handleChange} />\r\n                <input placeholder=\"name\" name=\"brdwriter\" value={this.state.brdwriter} onChange={this.handleChange} />\r\n                <button onClick={this.handleSave}>Save</button> \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return { selectedBoard: state.selectedBoard };\r\n}\r\n\r\nexport default connect(mapStateToProps)(BoardForm); ","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport BoardItem from './BoardItem';\r\nimport BoardForm from './BoardForm';\r\n\r\nclass Boardlist extends Component {\r\n    // handleSaveData = (data) => {\r\n    //     let boards = this.state.boards;\r\n    //     if (data.brdno === null || data.brdno === '' || data.brdno === undefined) { // new : Insert \r\n    //         console.log(\"1 pre:\" + this.state.maxNo);\r\n    //         this.setState({\r\n    //             maxNo: this.state.maxNo + 1,\r\n    //             boards: boards.concat({ brdno: this.state.maxNo, brddate: new Date(), ...data })\r\n    //         });\r\n\r\n    //         console.log(\"2 afer:\" + this.state.maxNo);\r\n    //     } else {   // Update \r\n    //         this.setState({\r\n    //             boards: boards.map(row => data.brdno === row.brdno ? { ...data } : row)\r\n    //         })\r\n    //     }\r\n    // }\r\n\r\n    // handleRemove = (brdno) => {\r\n    //     this.setState({\r\n    //         boards: this.state.boards.filter(\r\n    //             row => row.brdno !== brdno)\r\n    //     })\r\n    // }\r\n\r\n    // handleSelectRow = (row) => {\r\n    //     this.setState({\r\n    //         selectedBoard: row\r\n    //     });\r\n    // }\r\n\r\n    render() {\r\n        const { boards } = this.props;\r\n\r\n        return (\r\n            <div>\r\n                <h3>React + Redux Board 1</h3>\r\n                <BoardForm />\r\n                <table border=\"1\">\r\n                    <tbody>\r\n                        <tr align=\"center\">\r\n                            <td width=\"50\">No.</td>\r\n                            <td width=\"300\">Title</td>\r\n                            <td width=\"100\">Name</td>\r\n                            <td width=\"100\">Date</td> \r\n                            <td width=\"100\">Del</td> \r\n                        </tr>\r\n                        {\r\n                            boards.map(row => \r\n                                ( <BoardItem key={row.brdno} row={row} />))\r\n                        } \r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n// export default Boardlist;\r\n\r\n// const mapStateToProps = ( state ) => {\r\n//     return {\r\n//         menu_data: state.xpg_menu.menu_data,\r\n//         device: state.xpg_menu.device\r\n//     }\r\n// }\r\n\r\n// const mapDispatchToProps = ( dispatch ) => {\r\n//     // return bindActionCreators( actions, dispatch );\r\n//     return {\r\n//         HandleGetMenu: (value) => { dispatch( actions.receiveMenu(value) ) },\r\n//         HandleSetDevice: (value) => { dispatch( actions.setDevice(value) ) }\r\n//     }\r\n// }\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(App);\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        boards: state.Board_Reducer.boards\r\n    };\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps)(Boardlist);\r\n\r\n","import React from 'react';\nimport './App.css';\nimport { connect } from 'react-redux';\n\nimport MenuComp from './component/ui/menu/MenuComp';\nimport Boardlist from './component/ui/board/Boardlist';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header>\n        <div className=\"Title\"><h2>bhkimz blog</h2></div>\n      </header>\n      <nav>\n        <MenuComp></MenuComp>\n      </nav>\n      <section className=\"Content\">\n        <Boardlist></Boardlist>\n      </section>\n      <footer>\n        <div>\n          copy right bhkimz\n        </div>\n      </footer>\n\n    </div>\n  );\n}\n\nlet mapStateToProps = (state) => {\n  return {\n    boards: state.boards\n  };\n}\n\nexport default connect(mapStateToProps)(App);\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from 'redux';\r\n\r\nimport Board_Reducer from './Board_Reducer';\r\n\r\n\r\nconst reducers = combineReducers({\r\n    Board_Reducer\r\n})\r\n\r\n\r\nexport default reducers;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\n\nimport reducers from './reducers';\n\nconst store = createStore(reducers);\n\nconsole.log(store.getState() );\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}