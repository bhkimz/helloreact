{"version":3,"sources":["component/ui/menu/MenuComp.js","config/FireBase.js","reducers/Board_Reducer.js","component/ui/board/BoardItem.js","component/ui/board/BoardForm.js","component/ui/board/Boardlist.js","App.js","serviceWorker.js","reducers/index.js","index.js"],"names":["MenuComp","react_default","a","createElement","className","onClick","this","props","Component","defaultApp","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","console","log","name","firestore","board_save","createAction","board_remove","brdno","board_read","board_list","firebase_board_save","data","arguments","length","undefined","dispatch","brddate","Timestamp","now","collection","doc","update","then","toDate","toLocaleDateString","id","set","handleActions","_handleActions","Object","defineProperty","state","_ref","boards","payload","selectedBoard","_ref2","findIndex","row","objectSpread","date","Date","concat","map","_ref3","filter","_ref4","find","connect","firebase_board_remove","delete","inx","brdtitle","brdwriter","BoardForm","initialSelectedBoard","rddate","handleChange","e","target","value","_this","setState","handleSave","nextProps","placeholder","onChange","Boardlist","orderBy","get","snapshot","rows","forEach","childData","push","board_BoardForm","border","align","width","board_BoardItem","key","Board_Reducer","ui_menu_MenuComp","board_Boardlist","Boolean","window","location","hostname","match","reducers","combineReducers","store","createStore","applyMiddleware","thunk","getState","ReactDOM","render","es","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.015fc5d4.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport './MenuComp.css';\r\n\r\nclass MenuComp extends Component{ \r\n    render(){\r\n        const style = {\r\n          backgroundColor : 'red',\r\n          border: '1px solid black', \r\n          left: 0, \r\n        }\r\n\r\n        return( \r\n            <div className=\"Menu\">\r\n            {/* // <div style={style}> */}\r\n            <ul>\r\n                <li  onClick={this.props.onClick} className=\"MenuItem\">\r\n                     메뉴 1\r\n                </li>\r\n                <li onClick={this.props.onClick} className=\"MenuItem\">\r\n                     메뉴 2\r\n                </li>\r\n                <li onClick={this.props.onClick} className=\"MenuItem\">\r\n                     메뉴 3\r\n                </li>\r\n            </ul>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MenuComp;","import firebase from 'firebase';\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyBOXOjavxdbV8sirvJsHGicnfzIdGFYVX8\",\r\n    authDomain: \"reacthello-38753.firebaseapp.com\",\r\n    databaseURL: \"https://reacthello-38753.firebaseio.com\",\r\n    projectId: \"reacthello-38753\",\r\n    storageBucket: \"reacthello-38753.appspot.com\",\r\n    messagingSenderId: \"646174446912\",\r\n    appId: \"1:646174446912:web:2ec1567fce657f2c\"\r\n};\r\n\r\n\r\n\r\n// Initialize the default app\r\nvar defaultApp = firebase.initializeApp(firebaseConfig);\r\nconsole.log(defaultApp.name);  // \"[DEFAULT]\"\r\n\r\nconst firestore = firebase.firestore(); \r\n// const settings = { timestampsInSnapshots: true };\r\n// Firestore.settings(settings);\r\n\r\nexport default firebase;\r\nexport { firestore };","import { createAction, handleActions } from 'redux-actions';\r\n\r\nimport firebase, {firestore} from '../config/FireBase'; \r\n\r\nconst BOARD_SAVE = 'SAVE';\r\nconst BOARD_REMOVE = 'REMOVE';\r\nconst BOARD_READ = 'READ';\r\nconst BOARD_LIST = 'LIST';\r\n\r\nexport const board_save = createAction(BOARD_SAVE);\r\nexport const board_remove = createAction(BOARD_REMOVE, brdno => brdno);\r\nexport const board_read = createAction(BOARD_READ);\r\nexport const board_list = createAction(BOARD_LIST);\r\n\r\n\r\nexport const firebase_board_list = () => {\r\n    console.log(\"firebase_board_list:\");\r\n    return (dispatch) => {\r\n        return firestore.collection('boards')\r\n            .orderBy(\"brddate\", \"desc\")\r\n            .get()\r\n            .then((snapshot) => {\r\n                var rows = [];\r\n                snapshot.forEach((doc) => {\r\n                    var childData = doc.data();\r\n                    childData.brddate = childData.brddate.toDate().toLocaleDateString('ko-KR');\r\n                    rows.push(childData);\r\n                });\r\n                dispatch(board_list(rows));\r\n            });\r\n    }\r\n}\r\n\r\nexport const firebase_board_remove = (brdno = {}) => { \r\n    return (dispatch) => { \r\n        return firestore.collection('boards')\r\n            .doc(brdno)\r\n            .delete()\r\n            .then(() => {\r\n                dispatch(board_remove(brdno));\r\n            })\r\n    }\r\n};\r\n\r\nexport const firebase_board_save = ( data = {}) => {\r\n    return (dispatch) => {\r\n        if (!data.brdno) {\r\n            console.log(\"1:\"+  data); \r\n\r\n            var doc = firestore.collection('boards').doc();\r\n            data.brdno = doc.id;\r\n            data.brddate = firebase.firestore.Timestamp.now();\r\n            return doc.set(data).then(() => {\r\n                //data.brddate = dateFormat(data.brddate, \"yyyy-mm-dd\");\r\n                data.brddate = data.brddate.toDate().toLocaleDateString('ko-KR');\r\n                dispatch(board_save(data));\r\n            })\r\n        } else {\r\n            console.log(\"2:\"+  data); \r\n            data.brddate = firebase.firestore.Timestamp.now();\r\n            return firestore.collection('boards').doc(data.brdno).update(data).then(() => {\r\n                data.brddate = data.brddate.toDate().toLocaleDateString('ko-KR');\r\n                dispatch(board_save(data));\r\n            })            \r\n        }\r\n    }\r\n};\r\n\r\nconst initialState = {\r\n    boards: [],\r\n    selectedBoard: {}\r\n};\r\n\r\nexport default handleActions({\r\n    [BOARD_LIST]: (state, { payload: data }) => {\r\n        return {\r\n            boards: data,\r\n            selectedBoard: {}\r\n        };\r\n    },\r\n    [BOARD_SAVE]: (state, { payload: data }) => {\r\n        let boards = state.boards;\r\n        let inx = boards.findIndex(row => row.brdno === data.brdno);\r\n        if (inx===-1) {                                                    // new : Insert\r\n            let newboards = [{date: new Date(), ...data }]\r\n            return {boards: newboards.concat(boards), selectedBoard: {} };\r\n        } else {                                                           // Update\r\n            return {boards: boards.map(row => data.brdno === row.brdno ? {...data }: row), selectedBoard: {} };\r\n        }    \r\n    },\r\n    [BOARD_REMOVE]: (state, { payload: brdno }) => {\r\n        let boards = state.boards;\r\n\r\n        return {\r\n            ...state,\r\n            boards: boards.filter(row => row.brdno !== brdno),\r\n            selectedBoard: {}\r\n        };\r\n    },\r\n    [BOARD_READ]: (state, { payload: brdno }) => {\r\n        let boards = state.boards;\r\n        return {\r\n            ...state,\r\n            selectedBoard: boards.find(row => row.brdno === brdno)\r\n        };\r\n    }\r\n}, initialState);\r\n\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { board_read, firebase_board_remove } from './../../../reducers/Board_Reducer';\r\n\r\nconst BoardItem = ({row, inx, board_read, firebase_board_remove}) => (\r\n    <tr>\r\n        <td>{inx}</td>\r\n        <td><a onClick={() => board_read(row.brdno)}> {row.brdtitle} </a></td>\r\n        <td>{row.brdwriter}</td>\r\n        <td>{row.brddate}</td> \r\n        <td><a onClick={() => { firebase_board_remove(row.brdno) }}>X</a></td>\r\n    </tr>\r\n);\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    board_read: brdno => dispatch(board_read(brdno)),\r\n    firebase_board_remove: brdno => dispatch(firebase_board_remove(brdno))\r\n})\r\n\r\n\r\nexport default connect(null, mapDispatchToProps)(BoardItem)","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport { firebase_board_save  } from './../../../reducers/Board_Reducer'; \r\n\r\nclass BoardForm extends Component {\r\n    state = {};\r\n    initialSelectedBoard = {\r\n        brdno: \"\",\r\n        brdtitle: \"\",\r\n        brdwriter: \"\",\r\n        rddate: \"\"\r\n    };\r\n\r\n    handleChange = (e) => {\r\n        console.log(\"handleChange  [e.target.name]:\" +  [e.target.name] +\"/e.target.value:\" + e.target.value); \r\n        this.setState({ [e.target.name]: e.target.value });\r\n    }\r\n \r\n    handleSave = () => {\r\n        this.props.dispatch(firebase_board_save(this.state));\r\n        this.setState (this.initialSelectedBoard);\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        this.setState(nextProps.selectedBoard);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <input placeholder=\"title\" name=\"brdtitle\" value={this.state.brdtitle} onChange={this.handleChange} />\r\n                <input placeholder=\"name\" name=\"brdwriter\" value={this.state.brdwriter} onChange={this.handleChange} />\r\n                <button onClick={this.handleSave}>Save</button> \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return { selectedBoard: state.selectedBoard };\r\n}\r\n\r\nexport default connect(mapStateToProps)(BoardForm); ","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport BoardItem from './BoardItem';\r\nimport BoardForm from './BoardForm';\r\nimport { firebase_board_list } from './../../../reducers/Board_Reducer';\r\n\r\nclass Boardlist extends Component {\r\n    componentDidMount() {\r\n        this.props.dispatch(firebase_board_list());\r\n    }\r\n\r\n    render() {\r\n        const { boards } = this.props;\r\n\r\n        return (\r\n            <div>\r\n                <h3>React + Redux Board 1</h3>\r\n                <BoardForm />\r\n                <table border=\"1\">\r\n                    <tbody>\r\n                        <tr align=\"center\">\r\n                            <td width=\"50\">No.</td>\r\n                            <td width=\"300\">Title</td>\r\n                            <td width=\"100\">Name</td>\r\n                            <td width=\"100\">Date</td>\r\n                            <td width=\"100\">Del</td>\r\n                        </tr>\r\n                        {\r\n                            boards.map((row, inx) =>\r\n                                (<BoardItem key={inx} inx={inx+1} row={row}  />))\r\n                        }\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n// export default Boardlist;\r\n\r\n// const mapStateToProps = ( state ) => {\r\n//     return {\r\n//         menu_data: state.xpg_menu.menu_data,\r\n//         device: state.xpg_menu.device\r\n//     }\r\n// }\r\n\r\n// const mapDispatchToProps = ( dispatch ) => {\r\n//     // return bindActionCreators( actions, dispatch );\r\n//     return {\r\n//         HandleGetMenu: (value) => { dispatch( actions.receiveMenu(value) ) },\r\n//         HandleSetDevice: (value) => { dispatch( actions.setDevice(value) ) }\r\n//     }\r\n// }\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(App);\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        boards: state.Board_Reducer.boards,\r\n        selectedBoard: state.Board_Reducer.selectedBoard\r\n    };\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps)(Boardlist);\r\n\r\n","import React from 'react';\nimport './App.css';\nimport { connect } from 'react-redux';\n\nimport MenuComp from './component/ui/menu/MenuComp';\nimport Boardlist from './component/ui/board/Boardlist';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header>\n        <div className=\"Title\"><h2>bhkimz blog</h2></div>\n      </header>\n      <nav>\n        <MenuComp></MenuComp>\n      </nav>\n      <section className=\"Content\">\n        <Boardlist></Boardlist>\n      </section>\n      <footer>\n        <div>\n          copy right bhkimz\n        </div>\n      </footer>\n\n    </div>\n  );\n}\n\nlet mapStateToProps = (state) => {\n  return {\n    boards: state.boards\n  };\n}\n\nexport default connect(mapStateToProps)(App);\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from 'redux';\r\n\r\nimport Board_Reducer from './Board_Reducer';\r\n\r\n\r\nconst reducers = combineReducers({\r\n    Board_Reducer\r\n})\r\n\r\n\r\nexport default reducers;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\n\nimport reducers from './reducers';\nimport thunk from 'redux-thunk'; \n\nconst store = createStore(reducers \n        , applyMiddleware(thunk) );\n        \nconsole.log(\"===========state start\");\nconsole.log(store.getState() );\nconsole.log(\"===========state end\");\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}